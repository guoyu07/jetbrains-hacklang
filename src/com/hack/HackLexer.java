/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.hack;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.hack.psi.HackTypes.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Hack.flex</tt>
 */
public class HackLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int DQ_STR = 2;
  public static final int HDND_START = 4;
  public static final int HD = 6;
  public static final int ND = 8;
  public static final int FUNC_NAME = 10;
  public static final int MEMB_NAME = 12;
  public static final int SCOPE_NAME = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  4,  5,  6,  7,  7,  8,  8,  9, 9
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\6\1\3\1\124\1\125\1\5\22\0\1\114\1\71\1\15\1\4\1\57\1\106\1\110\1"+
    "\13\1\64\1\65\1\2\1\23\1\63\1\17\1\20\1\1\1\10\1\121\6\122\2\11\1\62\1\61"+
    "\1\54\1\70\1\105\1\55\1\113\1\37\1\120\1\34\1\31\1\22\1\30\1\7\1\42\1\26\2"+
    "\7\1\25\1\41\1\27\1\36\1\43\1\7\1\32\1\40\1\35\1\33\1\117\1\7\1\123\2\7\1"+
    "\14\1\12\1\16\1\112\1\24\1\0\1\74\1\101\1\44\1\53\1\21\1\72\1\116\1\56\1\60"+
    "\1\7\1\115\1\73\1\75\1\46\1\45\1\76\1\77\1\51\1\47\1\50\1\52\1\103\1\104\1"+
    "\102\1\100\1\7\1\66\1\111\1\67\1\107\6\0\1\124\242\0\2\124\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\0\1\2\3\0\1\3\1\4\1\5"+
    "\1\6\1\7\1\10\2\11\1\12\1\3\1\13\1\14"+
    "\1\15\1\16\1\17\1\10\1\20\4\10\1\21\13\10"+
    "\1\22\1\23\1\3\1\10\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\10\10\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\6\1\10\2\44"+
    "\1\45\1\44\1\6\1\46\1\3\1\1\1\6\1\3"+
    "\2\1\1\2\1\6\1\2\2\47\1\50\1\51\5\52"+
    "\1\3\1\52\1\0\1\53\1\54\1\55\1\0\2\7"+
    "\1\56\1\0\1\57\5\0\1\60\1\61\1\0\1\62"+
    "\1\63\1\0\1\64\4\10\1\65\1\66\6\10\2\21"+
    "\6\10\1\67\16\10\1\70\2\0\1\71\1\0\1\72"+
    "\2\73\1\10\1\74\1\10\1\75\1\76\1\77\1\100"+
    "\6\10\1\101\14\10\1\102\1\0\1\103\1\104\1\105"+
    "\1\106\1\67\1\107\1\0\1\10\1\110\1\111\1\0"+
    "\1\112\1\1\1\113\2\114\1\1\1\114\2\115\1\2"+
    "\1\115\1\47\1\0\1\116\4\52\1\117\1\52\2\0"+
    "\1\120\1\0\1\57\1\0\1\121\1\122\1\123\14\10"+
    "\1\124\2\10\1\125\1\10\1\21\1\126\1\127\6\10"+
    "\1\130\1\10\1\131\10\10\1\132\6\10\1\133\1\10"+
    "\1\134\1\135\2\0\1\136\1\73\1\10\1\137\2\10"+
    "\1\140\1\141\1\142\1\143\4\10\1\105\16\10\1\144"+
    "\1\0\1\10\1\0\1\145\1\1\1\146\3\147\1\150"+
    "\3\151\2\47\1\52\1\152\1\153\2\52\1\0\1\7"+
    "\2\0\1\154\1\155\1\156\1\10\1\157\10\10\1\160"+
    "\1\10\1\161\1\162\4\10\1\163\3\10\1\164\4\10"+
    "\1\161\3\10\1\165\4\10\1\166\1\167\1\73\23\10"+
    "\1\170\1\10\1\171\1\10\1\0\1\10\1\0\1\1"+
    "\1\172\1\173\2\47\2\52\2\0\11\10\1\174\1\175"+
    "\1\10\1\176\1\177\1\200\4\10\1\201\1\10\1\202"+
    "\1\203\1\204\4\10\1\205\6\10\1\206\1\207\1\210"+
    "\1\211\1\10\1\212\1\213\4\10\1\214\1\215\1\216"+
    "\1\217\1\10\1\0\1\1\2\47\1\220\1\52\2\0"+
    "\1\221\12\10\1\222\1\223\1\224\1\10\1\225\15\10"+
    "\1\226\1\227\1\211\1\0\1\1\2\47\1\230\2\0"+
    "\1\231\2\10\1\232\2\10\1\233\2\10\1\234\1\235"+
    "\4\10\1\236\1\10\1\237\3\10\1\240\1\111\1\113"+
    "\2\47\2\0\2\10\1\241\1\10\1\242\5\10\1\243"+
    "\1\244\1\245\1\10\2\47\2\0\2\10\1\246\2\10"+
    "\1\247\1\250\1\10\1\251\2\47\2\0\1\10\1\252"+
    "\1\253\1\47\1\254\1\0\1\255\1\10\1\256\1\257"+
    "\1\260";

  private static int [] zzUnpackAction() {
    int [] result = new int[581];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\126\0\254\0\u0102\0\u0158\0\u01ae\0\u0204\0\u025a"+
    "\0\u02b0\0\u0306\0\u035c\0\u03b2\0\u0408\0\u045e\0\u04b4\0\u050a"+
    "\0\u0560\0\u05b6\0\u035c\0\u060c\0\u035c\0\u035c\0\u035c\0\u0662"+
    "\0\u06b8\0\u070e\0\u0764\0\u07ba\0\u0810\0\u0866\0\u08bc\0\u0912"+
    "\0\u0968\0\u09be\0\u0a14\0\u0a6a\0\u0ac0\0\u0b16\0\u0b6c\0\u0bc2"+
    "\0\u0c18\0\u0c6e\0\u0cc4\0\u0d1a\0\u0d70\0\u0dc6\0\u0e1c\0\u035c"+
    "\0\u0e72\0\u035c\0\u035c\0\u035c\0\u035c\0\u035c\0\u0ec8\0\u0f1e"+
    "\0\u0f74\0\u0fca\0\u1020\0\u1076\0\u10cc\0\u1122\0\u1178\0\u11ce"+
    "\0\u1224\0\u127a\0\u035c\0\u12d0\0\u1326\0\u137c\0\u035c\0\u13d2"+
    "\0\u1428\0\u147e\0\u14d4\0\u035c\0\u152a\0\u1580\0\u15d6\0\u162c"+
    "\0\u1682\0\u16d8\0\u172e\0\u1784\0\u17da\0\u1830\0\u1886\0\u18dc"+
    "\0\u1932\0\u1988\0\u035c\0\u19de\0\u1a34\0\u1a8a\0\u1ae0\0\u1b36"+
    "\0\u1b8c\0\u1be2\0\u1c38\0\u1c8e\0\u035c\0\u1ce4\0\u035c\0\u1d3a"+
    "\0\u035c\0\u1d90\0\u1de6\0\u1e3c\0\u1e92\0\u1ee8\0\u1f3e\0\u1f94"+
    "\0\u060c\0\u1fea\0\u035c\0\u035c\0\u2040\0\u035c\0\u035c\0\u2096"+
    "\0\u035c\0\u20ec\0\u2142\0\u2198\0\u21ee\0\u035c\0\u035c\0\u2244"+
    "\0\u229a\0\u22f0\0\u2346\0\u239c\0\u23f2\0\u2448\0\u249e\0\u24f4"+
    "\0\u254a\0\u25a0\0\u25f6\0\u264c\0\u26a2\0\u050a\0\u26f8\0\u274e"+
    "\0\u27a4\0\u27fa\0\u2850\0\u28a6\0\u28fc\0\u2952\0\u29a8\0\u29fe"+
    "\0\u2a54\0\u2aaa\0\u2b00\0\u2b56\0\u050a\0\u2bac\0\u2c02\0\u2c58"+
    "\0\u2cae\0\u035c\0\u2d04\0\u2d5a\0\u2db0\0\u050a\0\u2e06\0\u035c"+
    "\0\u2e5c\0\u035c\0\u2eb2\0\u2f08\0\u2f5e\0\u2fb4\0\u300a\0\u3060"+
    "\0\u30b6\0\u310c\0\u3162\0\u31b8\0\u320e\0\u3264\0\u32ba\0\u3310"+
    "\0\u3366\0\u33bc\0\u3412\0\u3468\0\u34be\0\u3514\0\u035c\0\u356a"+
    "\0\u035c\0\u035c\0\u035c\0\u035c\0\u035c\0\u035c\0\u35c0\0\u3616"+
    "\0\u035c\0\u366c\0\u36c2\0\u035c\0\u3718\0\u376e\0\u035c\0\u37c4"+
    "\0\u381a\0\u1682\0\u035c\0\u3870\0\u38c6\0\u1830\0\u391c\0\u3972"+
    "\0\u035c\0\u39c8\0\u3a1e\0\u3a74\0\u3aca\0\u3b20\0\u3b76\0\u3bcc"+
    "\0\u3c22\0\u035c\0\u3c78\0\u3cce\0\u3cce\0\u1f3e\0\u1f94\0\u035c"+
    "\0\u3d24\0\u3d7a\0\u3dd0\0\u3e26\0\u3e7c\0\u3ed2\0\u3f28\0\u3f7e"+
    "\0\u3fd4\0\u402a\0\u4080\0\u40d6\0\u050a\0\u412c\0\u4182\0\u050a"+
    "\0\u41d8\0\u422e\0\u050a\0\u050a\0\u4284\0\u42da\0\u4330\0\u4386"+
    "\0\u43dc\0\u4432\0\u4488\0\u44de\0\u050a\0\u4534\0\u458a\0\u45e0"+
    "\0\u4636\0\u468c\0\u46e2\0\u4738\0\u478e\0\u050a\0\u47e4\0\u483a"+
    "\0\u4890\0\u48e6\0\u493c\0\u4992\0\u050a\0\u49e8\0\u035c\0\u035c"+
    "\0\u4a3e\0\u4a94\0\u035c\0\u4aea\0\u4b40\0\u4b96\0\u4bec\0\u4c42"+
    "\0\u035c\0\u035c\0\u035c\0\u4c98\0\u4cee\0\u4d44\0\u4d9a\0\u4df0"+
    "\0\u050a\0\u4e46\0\u4e9c\0\u4ef2\0\u4f48\0\u4f9e\0\u4ff4\0\u504a"+
    "\0\u50a0\0\u50f6\0\u514c\0\u51a2\0\u51f8\0\u524e\0\u52a4\0\u035c"+
    "\0\u52fa\0\u5350\0\u53a6\0\u035c\0\u53fc\0\u035c\0\u035c\0\u5452"+
    "\0\u1682\0\u035c\0\u035c\0\u54a8\0\u1830\0\u54fe\0\u5554\0\u55aa"+
    "\0\u1a34\0\u1a34\0\u5600\0\u5656\0\u56ac\0\u3bcc\0\u5702\0\u5758"+
    "\0\u050a\0\u050a\0\u57ae\0\u5804\0\u050a\0\u585a\0\u58b0\0\u5906"+
    "\0\u595c\0\u59b2\0\u5a08\0\u5a5e\0\u5ab4\0\u050a\0\u5b0a\0\u2448"+
    "\0\u050a\0\u5b60\0\u5bb6\0\u5c0c\0\u5c62\0\u050a\0\u5cb8\0\u5d0e"+
    "\0\u5d64\0\u050a\0\u5dba\0\u5e10\0\u5e66\0\u5ebc\0\u050a\0\u5f12"+
    "\0\u5f68\0\u5fbe\0\u050a\0\u6014\0\u606a\0\u60c0\0\u6116\0\u035c"+
    "\0\u035c\0\u616c\0\u61c2\0\u6218\0\u626e\0\u62c4\0\u631a\0\u6370"+
    "\0\u63c6\0\u641c\0\u6472\0\u64c8\0\u651e\0\u6574\0\u65ca\0\u6620"+
    "\0\u6676\0\u66cc\0\u6722\0\u6778\0\u67ce\0\u050a\0\u6824\0\u050a"+
    "\0\u687a\0\u68d0\0\u6926\0\u697c\0\u69d2\0\u035c\0\u035c\0\u6a28"+
    "\0\u6a7e\0\u6ad4\0\u6b2a\0\u6b80\0\u6bd6\0\u6c2c\0\u6c82\0\u6cd8"+
    "\0\u6d2e\0\u6d84\0\u6dda\0\u6e30\0\u6e86\0\u6edc\0\u050a\0\u050a"+
    "\0\u6f32\0\u050a\0\u050a\0\u050a\0\u6f88\0\u6fde\0\u7034\0\u708a"+
    "\0\u050a\0\u70e0\0\u050a\0\u050a\0\u050a\0\u7136\0\u718c\0\u71e2"+
    "\0\u7238\0\u2d04\0\u728e\0\u72e4\0\u733a\0\u7390\0\u73e6\0\u743c"+
    "\0\u7492\0\u050a\0\u050a\0\u74e8\0\u753e\0\u050a\0\u050a\0\u7594"+
    "\0\u75ea\0\u7640\0\u7696\0\u050a\0\u050a\0\u050a\0\u035c\0\u76ec"+
    "\0\u7742\0\u7798\0\u77ee\0\u7844\0\u1a34\0\u789a\0\u78f0\0\u7946"+
    "\0\u050a\0\u799c\0\u79f2\0\u7a48\0\u7a9e\0\u7af4\0\u7b4a\0\u7ba0"+
    "\0\u7bf6\0\u7c4c\0\u7ca2\0\u050a\0\u050a\0\u050a\0\u7cf8\0\u050a"+
    "\0\u7d4e\0\u7da4\0\u7dfa\0\u7e50\0\u7ea6\0\u7efc\0\u7f52\0\u7fa8"+
    "\0\u7ffe\0\u8054\0\u80aa\0\u8100\0\u8156\0\u050a\0\u050a\0\u050a"+
    "\0\u81ac\0\u8202\0\u8258\0\u82ae\0\u1a34\0\u8304\0\u835a\0\u050a"+
    "\0\u83b0\0\u8406\0\u050a\0\u845c\0\u84b2\0\u050a\0\u8508\0\u855e"+
    "\0\u85b4\0\u050a\0\u860a\0\u8660\0\u86b6\0\u870c\0\u050a\0\u8762"+
    "\0\u050a\0\u87b8\0\u880e\0\u8864\0\u050a\0\u88ba\0\u8910\0\u8966"+
    "\0\u89bc\0\u8a12\0\u8a68\0\u8abe\0\u8b14\0\u050a\0\u8b6a\0\u050a"+
    "\0\u8bc0\0\u8c16\0\u8c6c\0\u8cc2\0\u8d18\0\u050a\0\u050a\0\u050a"+
    "\0\u8d6e\0\u8dc4\0\u8e1a\0\u8e70\0\u8ec6\0\u8f1c\0\u8f72\0\u050a"+
    "\0\u8fc8\0\u901e\0\u050a\0\u050a\0\u9074\0\u050a\0\u90ca\0\u9120"+
    "\0\u9176\0\u91cc\0\u9222\0\u050a\0\u050a\0\u9278\0\u1932\0\u92ce"+
    "\0\u035c\0\u9324\0\u1932\0\u035c\0\u050a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[581];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\1\14\1\15\1\16\1\17\2\16\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\20\1\33\1\34\1\20\1\35\1\36\1\37"+
    "\4\20\1\40\2\20\1\41\1\42\1\20\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\20\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\20\1\72"+
    "\1\73\1\74\1\20\1\75\1\76\1\20\1\77\1\100"+
    "\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110"+
    "\2\20\1\111\1\20\2\22\1\20\1\13\1\16\12\112"+
    "\1\113\2\112\1\114\41\112\1\115\46\112\3\13\1\116"+
    "\1\13\2\116\1\117\3\13\1\120\5\13\2\117\1\13"+
    "\30\117\2\13\1\117\1\13\1\117\11\13\13\117\7\13"+
    "\1\116\4\117\2\13\1\117\1\13\1\116\3\121\1\116"+
    "\1\121\1\116\1\122\3\121\1\123\44\121\1\124\34\121"+
    "\1\122\10\121\1\122\3\121\1\116\1\121\1\116\1\122"+
    "\1\125\2\121\1\123\6\121\2\125\1\121\30\125\2\121"+
    "\1\125\1\124\1\125\11\121\13\125\7\121\1\122\4\125"+
    "\2\121\1\125\1\121\1\122\3\13\1\116\1\13\2\116"+
    "\105\13\1\116\10\13\1\116\3\126\1\116\1\126\1\116"+
    "\1\127\1\130\11\126\2\130\1\126\30\130\2\126\1\130"+
    "\1\126\1\130\11\126\13\130\7\126\1\127\4\130\2\126"+
    "\1\130\1\126\1\127\3\13\1\116\1\13\2\116\1\131"+
    "\11\13\2\131\1\13\1\132\27\131\2\13\1\131\1\13"+
    "\1\131\3\13\1\133\5\13\13\131\7\13\1\116\4\131"+
    "\2\13\1\131\1\13\1\116\7\13\1\134\11\13\2\134"+
    "\1\13\30\134\2\13\1\134\1\13\1\134\11\13\13\134"+
    "\10\13\4\134\2\13\1\134\5\13\1\116\1\13\2\116"+
    "\1\135\11\13\2\135\1\13\2\135\1\136\11\135\1\137"+
    "\1\140\2\135\1\141\7\135\2\13\1\135\1\142\1\135"+
    "\11\13\13\135\7\13\1\116\2\135\1\143\1\135\2\13"+
    "\1\135\1\13\1\116\127\0\1\17\1\144\65\0\1\145"+
    "\37\0\1\146\65\0\1\147\40\0\1\16\1\0\2\16"+
    "\15\0\1\150\67\0\1\16\10\0\1\16\3\17\1\151"+
    "\1\17\1\152\120\17\7\0\3\20\7\0\2\20\1\0"+
    "\30\20\2\0\1\20\1\0\1\20\11\0\13\20\10\0"+
    "\7\20\12\0\1\153\1\154\6\0\1\155\2\156\56\0"+
    "\1\157\1\160\15\0\1\157\2\153\1\160\12\0\2\22"+
    "\6\0\1\155\2\156\76\0\2\22\3\0\12\161\1\162"+
    "\1\163\112\161\10\0\1\154\1\22\5\0\1\164\1\165"+
    "\47\0\1\166\14\0\1\167\13\0\2\22\13\0\2\155"+
    "\6\0\1\170\47\0\1\171\30\0\2\155\12\0\3\20"+
    "\7\0\2\20\1\0\20\20\1\172\1\20\1\173\5\20"+
    "\2\0\1\20\1\0\1\20\11\0\1\20\1\174\6\20"+
    "\1\175\2\20\10\0\7\20\25\0\1\176\44\0\1\177"+
    "\44\0\3\20\7\0\2\20\1\0\1\200\27\20\2\0"+
    "\1\20\1\0\1\20\11\0\13\20\10\0\7\20\11\0"+
    "\3\20\7\0\2\20\1\0\3\20\1\201\24\20\2\0"+
    "\1\20\1\0\1\20\11\0\3\20\1\202\7\20\10\0"+
    "\7\20\11\0\3\20\7\0\2\20\1\0\7\20\1\203"+
    "\3\20\1\204\14\20\2\0\1\20\1\0\1\20\11\0"+
    "\13\20\10\0\7\20\11\0\3\20\7\0\2\20\1\0"+
    "\13\20\1\205\14\20\2\0\1\20\1\0\1\20\11\0"+
    "\13\20\10\0\7\20\11\0\3\206\7\0\2\206\1\0"+
    "\6\206\1\207\21\206\2\0\1\206\1\0\1\206\11\0"+
    "\13\206\10\0\7\206\11\0\3\20\7\0\1\210\1\20"+
    "\1\0\30\20\2\0\1\20\1\0\1\20\11\0\13\20"+
    "\10\0\7\20\11\0\3\20\7\0\2\20\1\0\30\20"+
    "\2\0\1\20\1\0\1\20\11\0\2\20\1\211\10\20"+
    "\10\0\7\20\11\0\3\20\7\0\2\20\1\0\30\20"+
    "\2\0\1\20\1\0\1\20\11\0\2\20\1\212\10\20"+
    "\10\0\7\20\11\0\3\20\7\0\2\20\1\0\21\20"+
    "\1\213\6\20\2\0\1\20\1\0\1\20\11\0\1\20"+
    "\1\214\1\215\10\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\25\20\1\216\2\20\2\0\1\20\1\0"+
    "\1\20\11\0\13\20\10\0\7\20\11\0\3\20\7\0"+
    "\1\217\1\20\1\0\26\20\1\220\1\20\2\0\1\20"+
    "\1\0\1\20\11\0\2\20\1\221\10\20\10\0\7\20"+
    "\11\0\3\20\7\0\1\222\1\20\1\0\24\20\1\223"+
    "\3\20\2\0\1\224\1\0\1\20\11\0\12\20\1\225"+
    "\10\0\7\20\11\0\3\20\7\0\2\20\1\0\25\20"+
    "\1\226\1\227\1\20\2\0\1\230\1\0\1\20\11\0"+
    "\6\20\1\231\4\20\10\0\7\20\11\0\3\20\7\0"+
    "\1\232\1\20\1\0\30\20\2\0\1\20\1\0\1\20"+
    "\11\0\13\20\10\0\7\20\11\0\3\20\7\0\2\20"+
    "\1\0\23\20\1\233\4\20\2\0\1\20\1\0\1\20"+
    "\11\0\13\20\10\0\7\20\11\0\3\20\7\0\1\234"+
    "\1\20\1\0\21\20\1\235\6\20\2\0\1\20\1\0"+
    "\1\20\11\0\13\20\10\0\7\20\56\0\1\236\1\237"+
    "\12\0\1\240\54\0\1\241\35\0\1\242\57\0\1\243"+
    "\11\0\2\243\1\0\24\243\1\244\3\243\2\0\1\243"+
    "\1\0\1\243\11\0\13\243\10\0\4\243\2\0\1\243"+
    "\11\0\3\20\7\0\2\20\1\0\22\20\1\245\5\20"+
    "\2\0\1\20\1\0\1\20\11\0\1\246\2\20\1\247"+
    "\7\20\10\0\7\20\64\0\1\250\133\0\1\251\14\0"+
    "\1\252\110\0\1\253\44\0\3\20\7\0\2\20\1\0"+
    "\21\20\1\254\4\20\1\255\1\20\2\0\1\20\1\0"+
    "\1\256\11\0\1\20\1\257\1\260\10\20\10\0\7\20"+
    "\11\0\3\20\7\0\2\20\1\0\22\20\1\261\1\262"+
    "\1\20\1\263\2\20\2\0\1\20\1\0\1\20\11\0"+
    "\7\20\1\264\2\20\1\265\10\0\7\20\11\0\3\20"+
    "\7\0\2\20\1\0\30\20\2\0\1\20\1\0\1\266"+
    "\11\0\13\20\10\0\7\20\11\0\3\20\7\0\2\20"+
    "\1\0\25\20\1\267\1\270\1\20\2\0\1\20\1\0"+
    "\1\20\11\0\2\20\1\271\10\20\10\0\7\20\11\0"+
    "\3\20\7\0\2\20\1\0\30\20\2\0\1\20\1\0"+
    "\1\272\11\0\13\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\21\20\1\273\3\20\1\274\2\20\2\0"+
    "\1\20\1\0\1\20\11\0\13\20\10\0\7\20\11\0"+
    "\3\20\7\0\2\20\1\0\21\20\1\275\6\20\2\0"+
    "\1\20\1\0\1\20\11\0\13\20\10\0\7\20\11\0"+
    "\3\20\7\0\2\20\1\0\30\20\2\0\1\276\1\0"+
    "\1\20\11\0\13\20\10\0\7\20\72\0\1\277\14\0"+
    "\1\300\110\0\1\301\125\0\1\302\17\0\1\303\105\0"+
    "\1\304\20\0\1\305\104\0\1\306\40\0\1\16\1\0"+
    "\2\16\15\0\1\150\46\0\1\307\20\0\1\16\10\0"+
    "\1\16\7\0\3\20\7\0\1\310\1\20\1\0\30\20"+
    "\2\0\1\20\1\0\1\20\11\0\13\20\10\0\7\20"+
    "\2\0\12\112\1\0\2\112\1\0\41\112\1\0\46\112"+
    "\15\0\1\311\3\0\1\311\24\0\1\311\1\0\2\311"+
    "\5\0\1\311\12\0\1\311\10\0\1\311\31\0\1\312"+
    "\11\0\2\312\1\0\30\312\2\0\1\312\1\0\1\312"+
    "\11\0\13\312\10\0\4\312\2\0\1\312\5\0\1\116"+
    "\1\0\2\116\105\0\1\116\10\0\1\116\7\0\3\117"+
    "\7\0\2\117\1\0\30\117\2\0\1\117\1\0\1\117"+
    "\11\0\13\117\10\0\7\117\11\0\1\313\11\0\2\313"+
    "\1\0\30\313\2\0\1\313\1\0\1\313\11\0\13\313"+
    "\10\0\4\313\2\0\1\313\2\0\3\121\1\0\1\121"+
    "\1\0\4\121\1\0\44\121\1\0\51\121\1\116\1\121"+
    "\1\116\1\122\3\121\1\0\44\121\1\0\34\121\1\122"+
    "\10\121\1\122\15\0\1\314\3\0\1\314\24\0\1\314"+
    "\1\0\2\314\5\0\1\314\12\0\1\314\10\0\1\314"+
    "\22\0\3\315\1\0\1\315\1\0\1\315\1\316\11\315"+
    "\2\316\1\315\30\316\2\315\1\316\1\0\1\316\11\315"+
    "\13\316\10\315\4\316\2\315\1\316\2\315\3\121\1\317"+
    "\1\121\1\320\1\121\3\125\1\0\6\121\2\125\1\121"+
    "\30\125\2\121\1\125\1\0\1\125\1\321\10\121\13\125"+
    "\10\121\7\125\2\322\3\126\1\0\1\126\1\0\123\126"+
    "\1\116\1\126\1\116\1\127\105\126\1\127\10\126\1\127"+
    "\3\126\1\323\1\126\1\324\1\126\3\130\7\126\2\130"+
    "\1\126\30\130\2\126\1\130\1\126\1\130\1\325\10\126"+
    "\13\130\10\126\7\130\2\326\7\0\3\131\7\0\2\131"+
    "\1\0\30\131\2\0\1\131\1\0\1\131\11\0\13\131"+
    "\10\0\7\131\11\0\3\131\7\0\2\131\1\0\1\327"+
    "\27\131\2\0\1\131\1\0\1\131\11\0\13\131\10\0"+
    "\7\131\11\0\3\134\7\0\2\134\1\0\30\134\2\0"+
    "\1\134\1\0\1\134\11\0\13\134\10\0\7\134\5\0"+
    "\1\330\1\0\2\330\3\135\7\0\2\135\1\0\30\135"+
    "\2\0\1\135\1\0\1\135\3\0\1\331\5\0\13\135"+
    "\7\0\1\330\7\135\1\0\1\330\3\0\1\330\1\0"+
    "\2\330\3\135\7\0\2\135\1\0\30\135\2\0\1\135"+
    "\1\0\1\135\3\0\1\331\5\0\3\135\1\332\7\135"+
    "\7\0\1\330\7\135\1\0\1\330\3\0\1\330\1\0"+
    "\2\330\3\135\7\0\1\333\1\135\1\0\30\135\2\0"+
    "\1\135\1\0\1\135\3\0\1\331\5\0\13\135\7\0"+
    "\1\330\7\135\1\0\1\330\3\0\1\330\1\0\2\330"+
    "\3\135\7\0\2\135\1\0\30\135\2\0\1\135\1\0"+
    "\1\135\3\0\1\331\5\0\2\135\1\334\10\135\7\0"+
    "\1\330\7\135\1\0\1\330\3\0\1\330\1\0\2\330"+
    "\3\135\7\0\2\135\1\0\30\135\2\0\1\135\1\0"+
    "\1\135\3\0\1\331\5\0\1\135\1\335\11\135\7\0"+
    "\1\330\7\135\1\0\1\330\7\0\1\336\11\0\2\336"+
    "\1\0\30\336\2\0\1\336\1\0\1\336\11\0\13\336"+
    "\10\0\4\336\2\0\1\336\5\0\1\330\1\0\2\330"+
    "\3\135\7\0\1\337\1\135\1\0\30\135\2\0\1\135"+
    "\1\0\1\135\3\0\1\331\5\0\13\135\7\0\1\330"+
    "\7\135\1\0\1\330\2\340\1\341\123\340\70\0\1\342"+
    "\61\0\1\343\104\0\1\151\132\0\1\153\1\154\6\0"+
    "\1\155\2\156\76\0\2\153\13\0\2\154\6\0\1\155"+
    "\2\156\76\0\2\154\13\0\2\155\7\0\2\156\76\0"+
    "\2\155\13\0\2\344\5\0\1\345\3\0\1\345\75\0"+
    "\2\344\13\0\1\346\110\0\1\346\14\0\2\347\7\0"+
    "\2\347\5\0\2\347\2\0\1\347\2\0\1\347\4\0"+
    "\1\347\6\0\1\347\16\0\1\347\1\0\1\347\4\0"+
    "\1\347\16\0\3\347\3\0\126\161\10\0\2\155\107\0"+
    "\2\155\23\0\1\350\114\0\3\20\7\0\2\20\1\0"+
    "\30\20\2\0\1\351\1\0\1\20\11\0\13\20\10\0"+
    "\7\20\11\0\3\20\7\0\2\20\1\0\26\20\1\352"+
    "\1\20\2\0\1\20\1\0\1\20\11\0\13\20\10\0"+
    "\7\20\11\0\3\20\7\0\2\20\1\0\23\20\1\353"+
    "\4\20\2\0\1\20\1\0\1\20\11\0\13\20\10\0"+
    "\7\20\11\0\3\20\7\0\2\20\1\0\24\20\1\354"+
    "\3\20\2\0\1\20\1\0\1\355\11\0\13\20\10\0"+
    "\7\20\11\0\3\20\7\0\2\20\1\0\1\20\1\356"+
    "\1\20\1\357\1\360\1\361\2\20\1\362\1\363\3\20"+
    "\1\364\12\20\2\0\1\20\1\0\1\20\11\0\13\20"+
    "\10\0\7\20\11\0\3\20\7\0\2\20\1\0\4\20"+
    "\1\365\23\20\2\0\1\20\1\0\1\20\11\0\13\20"+
    "\10\0\7\20\11\0\3\20\7\0\2\20\1\0\30\20"+
    "\2\0\1\20\1\0\1\20\11\0\3\20\1\366\7\20"+
    "\10\0\7\20\11\0\3\20\7\0\2\20\1\0\1\20"+
    "\1\367\26\20\2\0\1\20\1\0\1\20\11\0\13\20"+
    "\10\0\7\20\11\0\3\20\7\0\2\20\1\0\3\20"+
    "\1\370\24\20\2\0\1\20\1\0\1\20\11\0\13\20"+
    "\10\0\7\20\11\0\3\20\7\0\2\20\1\0\1\20"+
    "\1\371\26\20\2\0\1\20\1\0\1\20\11\0\13\20"+
    "\10\0\7\20\11\0\3\206\7\0\2\206\1\0\30\206"+
    "\2\0\1\206\1\0\1\206\11\0\13\206\10\0\7\206"+
    "\11\0\3\206\7\0\2\206\1\0\7\206\1\372\20\206"+
    "\2\0\1\206\1\0\1\206\11\0\13\206\10\0\7\206"+
    "\11\0\3\20\7\0\2\20\1\0\24\20\1\373\3\20"+
    "\2\0\1\20\1\0\1\20\11\0\13\20\10\0\7\20"+
    "\11\0\3\20\7\0\2\20\1\0\30\20\2\0\1\20"+
    "\1\0\1\20\11\0\4\20\1\374\6\20\10\0\7\20"+
    "\11\0\3\20\7\0\2\20\1\0\30\20\2\0\1\20"+
    "\1\0\1\375\11\0\13\20\10\0\7\20\11\0\3\20"+
    "\7\0\2\20\1\0\22\20\1\376\5\20\2\0\1\20"+
    "\1\0\1\20\11\0\13\20\10\0\7\20\11\0\3\20"+
    "\7\0\2\20\1\0\21\20\1\377\6\20\2\0\1\20"+
    "\1\0\1\20\11\0\2\20\1\u0100\10\20\10\0\7\20"+
    "\11\0\3\20\7\0\2\20\1\0\23\20\1\u0101\1\u0102"+
    "\3\20\2\0\1\20\1\0\1\20\11\0\13\20\10\0"+
    "\7\20\11\0\3\20\7\0\2\20\1\0\30\20\2\0"+
    "\1\20\1\0\1\20\11\0\12\20\1\u0103\10\0\7\20"+
    "\11\0\3\20\7\0\2\20\1\0\30\20\2\0\1\20"+
    "\1\0\1\20\11\0\1\20\1\u0104\1\20\1\u0105\7\20"+
    "\10\0\7\20\11\0\3\20\7\0\2\20\1\0\30\20"+
    "\2\0\1\20\1\0\1\20\11\0\3\20\1\u0106\7\20"+
    "\10\0\7\20\11\0\3\20\7\0\2\20\1\0\30\20"+
    "\2\0\1\20\1\0\1\20\11\0\1\20\1\u0107\11\20"+
    "\10\0\7\20\11\0\3\20\7\0\2\20\1\0\25\20"+
    "\1\u0108\2\20\2\0\1\20\1\0\1\20\11\0\2\20"+
    "\1\u0109\10\20\10\0\7\20\11\0\3\20\7\0\2\20"+
    "\1\0\30\20\2\0\1\20\1\0\1\20\11\0\2\20"+
    "\1\u010a\10\20\10\0\7\20\11\0\3\20\7\0\2\20"+
    "\1\0\30\20\2\0\1\20\1\0\1\u010b\11\0\13\20"+
    "\10\0\7\20\11\0\3\20\7\0\2\20\1\0\26\20"+
    "\1\u010c\1\20\2\0\1\20\1\0\1\20\11\0\2\20"+
    "\1\u010d\3\20\1\u010e\4\20\10\0\7\20\11\0\3\20"+
    "\7\0\2\20\1\0\30\20\2\0\1\20\1\0\1\20"+
    "\11\0\4\20\1\u010f\6\20\10\0\7\20\11\0\3\20"+
    "\7\0\2\20\1\0\25\20\1\u0110\2\20\2\0\1\20"+
    "\1\0\1\20\11\0\13\20\10\0\7\20\11\0\3\20"+
    "\7\0\2\20\1\0\30\20\2\0\1\20\1\0\1\20"+
    "\11\0\4\20\1\u0111\6\20\10\0\7\20\11\0\3\20"+
    "\7\0\2\20\1\0\23\20\1\u0112\1\u0113\3\20\2\0"+
    "\1\20\1\0\1\20\11\0\5\20\1\u0114\5\20\10\0"+
    "\7\20\11\0\3\20\7\0\1\u0115\1\20\1\0\30\20"+
    "\2\0\1\20\1\0\1\20\11\0\13\20\10\0\7\20"+
    "\11\0\3\20\7\0\2\20\1\0\30\20\2\0\1\20"+
    "\1\0\1\20\11\0\1\u0116\12\20\10\0\7\20\56\0"+
    "\1\u0117\13\0\1\u0118\113\0\1\u0119\137\0\1\u011a\142\0"+
    "\1\u011b\27\0\3\243\7\0\2\243\1\0\30\243\2\0"+
    "\1\243\1\0\1\243\11\0\13\243\10\0\7\243\11\0"+
    "\3\243\7\0\2\243\1\0\30\243\2\0\1\u011c\1\0"+
    "\1\243\11\0\13\243\10\0\7\243\11\0\3\20\7\0"+
    "\2\20\1\0\23\20\1\u011d\1\u011e\3\20\2\0\1\20"+
    "\1\0\1\20\11\0\11\20\1\u011f\1\20\10\0\7\20"+
    "\11\0\3\20\7\0\2\20\1\0\30\20\2\0\1\20"+
    "\1\0\1\20\11\0\4\20\1\u0120\6\20\10\0\7\20"+
    "\72\0\1\u0121\14\0\1\u0122\110\0\1\u0123\44\0\3\20"+
    "\7\0\2\20\1\0\25\20\1\u0124\2\20\2\0\1\20"+
    "\1\0\1\20\11\0\13\20\10\0\7\20\11\0\3\20"+
    "\7\0\2\20\1\0\22\20\1\u0125\5\20\2\0\1\20"+
    "\1\0\1\20\11\0\13\20\10\0\7\20\11\0\3\20"+
    "\7\0\2\20\1\0\22\20\1\u0126\5\20\2\0\1\20"+
    "\1\0\1\20\11\0\13\20\10\0\7\20\11\0\3\20"+
    "\7\0\2\20\1\0\21\20\1\u0127\6\20\2\0\1\20"+
    "\1\0\1\20\11\0\13\20\10\0\7\20\11\0\3\20"+
    "\7\0\2\20\1\0\30\20\2\0\1\20\1\0\1\20"+
    "\11\0\1\20\1\u0128\11\20\10\0\7\20\11\0\3\20"+
    "\7\0\2\20\1\0\27\20\1\u0129\2\0\1\20\1\0"+
    "\1\20\11\0\13\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\30\20\2\0\1\20\1\0\1\20\11\0"+
    "\6\20\1\u012a\4\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\25\20\1\u012b\2\20\2\0\1\20\1\0"+
    "\1\20\11\0\13\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\23\20\1\u012c\4\20\2\0\1\20\1\0"+
    "\1\20\11\0\13\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\30\20\2\0\1\20\1\0\1\20\11\0"+
    "\2\20\1\u012d\10\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\30\20\2\0\1\20\1\0\1\20\11\0"+
    "\10\20\1\u012e\2\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\21\20\1\u012f\6\20\2\0\1\20\1\0"+
    "\1\u0130\11\0\13\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\30\20\2\0\1\20\1\0\1\20\11\0"+
    "\7\20\1\u0131\3\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\25\20\1\u0132\2\20\2\0\1\20\1\0"+
    "\1\20\11\0\13\20\10\0\7\20\11\0\3\20\7\0"+
    "\1\u0133\1\20\1\0\30\20\2\0\1\20\1\0\1\20"+
    "\11\0\13\20\10\0\7\20\11\0\3\20\7\0\2\20"+
    "\1\0\21\20\1\u0134\6\20\2\0\1\20\1\0\1\20"+
    "\11\0\13\20\10\0\7\20\11\0\3\20\7\0\1\u0135"+
    "\1\20\1\0\30\20\2\0\1\20\1\0\1\20\11\0"+
    "\13\20\10\0\7\20\11\0\3\20\7\0\2\20\1\0"+
    "\30\20\2\0\1\20\1\0\1\u0136\11\0\13\20\10\0"+
    "\7\20\11\0\3\20\7\0\2\20\1\0\30\20\2\0"+
    "\1\20\1\0\1\u0137\11\0\13\20\10\0\7\20\72\0"+
    "\1\u0138\115\0\1\u0139\54\0\3\20\7\0\2\20\1\0"+
    "\20\20\1\u013a\7\20\2\0\1\20\1\0\1\20\11\0"+
    "\13\20\10\0\7\20\11\0\3\312\2\0\1\u013b\4\0"+
    "\2\312\1\0\30\312\2\0\1\312\1\0\1\312\11\0"+
    "\13\312\10\0\7\312\11\0\3\313\1\0\1\u013c\5\0"+
    "\2\313\1\0\30\313\2\0\1\313\1\0\1\313\11\0"+
    "\13\313\10\0\7\313\2\0\3\315\1\0\1\315\1\0"+
    "\51\315\1\0\51\315\1\0\1\315\1\0\1\315\3\316"+
    "\2\315\1\u013d\4\315\2\316\1\315\30\316\2\315\1\316"+
    "\1\0\1\316\11\315\13\316\10\315\7\316\2\315\3\0"+
    "\1\u013e\122\0\3\121\1\u013f\1\121\1\u0140\4\121\1\0"+
    "\44\121\1\0\44\121\2\u0141\3\0\1\u0142\122\0\3\126"+
    "\1\u0143\1\126\1\u0144\116\126\2\u0145\7\0\3\131\7\0"+
    "\2\131\1\0\20\131\1\u0146\6\131\1\u0147\2\0\1\131"+
    "\1\0\1\131\11\0\13\131\10\0\7\131\5\0\1\330"+
    "\1\0\2\330\55\0\1\331\27\0\1\330\10\0\1\330"+
    "\3\0\1\330\1\0\2\330\3\135\7\0\2\135\1\0"+
    "\30\135\2\0\1\135\1\0\1\135\3\0\1\331\5\0"+
    "\3\135\1\u0148\7\135\7\0\1\330\7\135\1\0\1\330"+
    "\3\0\1\330\1\0\2\330\3\135\7\0\2\135\1\0"+
    "\24\135\1\u0149\3\135\2\0\1\135\1\0\1\135\3\0"+
    "\1\331\5\0\13\135\7\0\1\330\7\135\1\0\1\330"+
    "\3\0\1\330\1\0\2\330\3\135\7\0\2\135\1\0"+
    "\30\135\2\0\1\135\1\0\1\135\3\0\1\331\5\0"+
    "\4\135\1\u014a\6\135\7\0\1\330\7\135\1\0\1\330"+
    "\3\0\1\330\1\0\2\330\3\135\7\0\2\135\1\0"+
    "\30\135\2\0\1\135\1\0\1\135\3\0\1\331\5\0"+
    "\2\135\1\u014b\10\135\7\0\1\330\7\135\1\0\1\330"+
    "\7\0\3\336\7\0\2\336\1\0\30\336\2\0\1\336"+
    "\1\0\1\336\11\0\13\336\10\0\7\336\5\0\1\330"+
    "\1\0\2\330\3\135\7\0\2\135\1\0\20\135\1\u014c"+
    "\7\135\2\0\1\135\1\0\1\135\3\0\1\331\5\0"+
    "\13\135\7\0\1\330\7\135\1\0\1\330\2\340\1\u014d"+
    "\124\340\1\u014e\1\u014d\123\340\44\0\1\u014f\6\0\1\u0150"+
    "\62\0\2\344\107\0\2\344\12\0\3\20\7\0\2\20"+
    "\1\0\21\20\1\u0151\6\20\2\0\1\20\1\0\1\20"+
    "\11\0\13\20\10\0\7\20\11\0\3\20\7\0\2\20"+
    "\1\0\30\20\2\0\1\20\1\0\1\20\11\0\3\20"+
    "\1\u0152\7\20\10\0\7\20\11\0\3\20\7\0\1\u0153"+
    "\1\20\1\0\30\20\2\0\1\20\1\0\1\20\11\0"+
    "\13\20\10\0\7\20\11\0\3\20\7\0\1\u0154\1\20"+
    "\1\0\30\20\2\0\1\20\1\0\1\20\11\0\13\20"+
    "\10\0\7\20\11\0\3\20\7\0\2\20\1\0\24\20"+
    "\1\u0155\3\20\2\0\1\20\1\0\1\20\11\0\13\20"+
    "\10\0\7\20\11\0\3\20\7\0\2\20\1\0\2\20"+
    "\1\u0156\25\20\2\0\1\20\1\0\1\20\11\0\13\20"+
    "\10\0\7\20\11\0\3\20\7\0\2\20\1\0\13\20"+
    "\1\u0157\14\20\2\0\1\20\1\0\1\20\11\0\13\20"+
    "\10\0\7\20\11\0\3\20\7\0\2\20\1\0\2\20"+
    "\1\u0158\4\20\1\u0159\20\20\2\0\1\20\1\0\1\20"+
    "\11\0\13\20\10\0\7\20\11\0\3\20\7\0\2\20"+
    "\1\0\2\20\1\u015a\25\20\2\0\1\20\1\0\1\20"+
    "\11\0\13\20\10\0\7\20\11\0\3\20\7\0\2\20"+
    "\1\0\1\20\1\u015b\26\20\2\0\1\20\1\0\1\20"+
    "\11\0\13\20\10\0\7\20\11\0\3\20\7\0\2\20"+
    "\1\0\6\20\1\u015c\21\20\2\0\1\20\1\0\1\20"+
    "\11\0\13\20\10\0\7\20\11\0\3\20\7\0\1\20"+
    "\1\u015d\1\0\30\20\2\0\1\20\1\0\1\20\11\0"+
    "\13\20\10\0\7\20\11\0\3\20\7\0\2\20\1\0"+
    "\14\20\1\41\1\42\12\20\2\0\1\20\1\0\1\20"+
    "\11\0\13\20\10\0\2\20\1\111\4\20\11\0\3\20"+
    "\7\0\2\20\1\0\1\20\1\u015e\26\20\2\0\1\20"+
    "\1\0\1\20\11\0\13\20\10\0\7\20\11\0\3\20"+
    "\7\0\2\20\1\0\14\20\1\u015f\13\20\2\0\1\20"+
    "\1\0\1\20\11\0\13\20\10\0\7\20\11\0\3\206"+
    "\7\0\1\206\1\u0160\1\0\30\206\2\0\1\206\1\0"+
    "\1\206\11\0\13\206\10\0\7\206\11\0\3\20\7\0"+
    "\2\20\1\0\25\20\1\u0161\2\20\2\0\1\20\1\0"+
    "\1\20\11\0\13\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\23\20\1\u0162\1\u0163\3\20\2\0\1\20"+
    "\1\0\1\20\11\0\13\20\10\0\7\20\11\0\3\20"+
    "\7\0\2\20\1\0\22\20\1\u0164\5\20\2\0\1\20"+
    "\1\0\1\20\11\0\13\20\10\0\7\20\11\0\3\20"+
    "\7\0\2\20\1\0\23\20\1\u0165\4\20\2\0\1\20"+
    "\1\0\1\20\11\0\13\20\10\0\7\20\11\0\3\20"+
    "\7\0\1\u0166\1\20\1\0\30\20\2\0\1\20\1\0"+
    "\1\20\11\0\13\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\20\20\1\u0167\7\20\2\0\1\20\1\0"+
    "\1\20\11\0\13\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\24\20\1\u0168\3\20\2\0\1\20\1\0"+
    "\1\20\11\0\13\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\30\20\2\0\1\20\1\0\1\20\11\0"+
    "\1\20\1\u015e\11\20\10\0\7\20\11\0\3\20\7\0"+
    "\1\u0169\1\20\1\0\30\20\2\0\1\20\1\0\1\20"+
    "\11\0\13\20\10\0\7\20\11\0\3\20\7\0\2\20"+
    "\1\0\30\20\2\0\1\20\1\0\1\20\11\0\1\u016a"+
    "\12\20\10\0\7\20\11\0\3\20\7\0\2\20\1\0"+
    "\30\20\2\0\1\20\1\0\1\u016b\11\0\13\20\10\0"+
    "\7\20\11\0\3\20\7\0\2\20\1\0\24\20\1\u016c"+
    "\3\20\2\0\1\20\1\0\1\20\11\0\13\20\10\0"+
    "\7\20\11\0\3\20\7\0\2\20\1\0\30\20\2\0"+
    "\1\20\1\0\1\20\11\0\4\20\1\u016d\6\20\10\0"+
    "\7\20\11\0\3\20\7\0\2\20\1\0\24\20\1\u016e"+
    "\3\20\2\0\1\20\1\0\1\20\11\0\13\20\10\0"+
    "\7\20\11\0\3\20\7\0\1\u016f\1\20\1\0\30\20"+
    "\2\0\1\20\1\0\1\20\11\0\13\20\10\0\7\20"+
    "\11\0\3\20\7\0\2\20\1\0\30\20\2\0\1\20"+
    "\1\0\1\u0170\11\0\13\20\10\0\7\20\11\0\3\20"+
    "\7\0\2\20\1\0\30\20\2\0\1\20\1\0\1\20"+
    "\11\0\1\20\1\u0171\11\20\10\0\7\20\11\0\3\20"+
    "\7\0\2\20\1\0\21\20\1\u0172\6\20\2\0\1\20"+
    "\1\0\1\20\11\0\13\20\10\0\7\20\11\0\3\20"+
    "\7\0\1\u0173\1\20\1\0\30\20\2\0\1\20\1\0"+
    "\1\20\11\0\13\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\21\20\1\u0174\6\20\2\0\1\20\1\0"+
    "\1\20\11\0\13\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\26\20\1\u0175\1\20\2\0\1\20\1\0"+
    "\1\20\11\0\13\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\26\20\1\u0176\1\20\2\0\1\20\1\0"+
    "\1\20\11\0\13\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\30\20\2\0\1\20\1\0\1\20\11\0"+
    "\2\20\1\u0177\10\20\10\0\7\20\60\0\1\u0178\154\0"+
    "\1\u0179\27\0\3\243\7\0\2\243\1\0\30\243\2\0"+
    "\1\243\1\0\1\u017a\11\0\13\243\10\0\7\243\11\0"+
    "\3\20\7\0\2\20\1\0\24\20\1\u017b\3\20\2\0"+
    "\1\20\1\0\1\20\11\0\13\20\10\0\7\20\11\0"+
    "\3\20\7\0\1\u017c\1\20\1\0\30\20\2\0\1\20"+
    "\1\0\1\20\11\0\13\20\10\0\7\20\11\0\3\20"+
    "\7\0\2\20\1\0\30\20\2\0\1\20\1\0\1\20"+
    "\11\0\2\20\1\u017d\10\20\10\0\7\20\11\0\3\20"+
    "\7\0\2\20\1\0\30\20\2\0\1\20\1\0\1\20"+
    "\11\0\1\20\1\u017e\11\20\10\0\7\20\11\0\3\20"+
    "\7\0\1\u017f\1\20\1\0\30\20\2\0\1\20\1\0"+
    "\1\20\11\0\13\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\20\20\1\u0180\7\20\2\0\1\20\1\0"+
    "\1\20\11\0\13\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\30\20\2\0\1\20\1\0\1\20\11\0"+
    "\2\20\1\u0181\10\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\30\20\2\0\1\20\1\0\1\20\11\0"+
    "\2\20\1\u0182\10\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\23\20\1\u0183\4\20\2\0\1\20\1\0"+
    "\1\20\11\0\13\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\22\20\1\u0184\5\20\2\0\1\20\1\0"+
    "\1\20\11\0\13\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\30\20\2\0\1\20\1\0\1\20\11\0"+
    "\2\20\1\u0185\10\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\24\20\1\u0186\3\20\2\0\1\20\1\0"+
    "\1\20\11\0\13\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\30\20\2\0\1\20\1\0\1\u0187\11\0"+
    "\13\20\10\0\7\20\11\0\3\20\7\0\1\u0188\1\20"+
    "\1\0\30\20\2\0\1\20\1\0\1\20\11\0\13\20"+
    "\10\0\7\20\11\0\3\20\7\0\2\20\1\0\24\20"+
    "\1\u0189\3\20\2\0\1\20\1\0\1\20\11\0\13\20"+
    "\10\0\7\20\11\0\3\20\7\0\2\20\1\0\30\20"+
    "\2\0\1\20\1\0\1\20\11\0\11\20\1\u018a\1\20"+
    "\10\0\7\20\11\0\3\20\7\0\2\20\1\0\30\20"+
    "\2\0\1\20\1\0\1\20\11\0\1\20\1\u018b\11\20"+
    "\10\0\7\20\11\0\3\20\7\0\1\u018c\1\20\1\0"+
    "\30\20\2\0\1\20\1\0\1\20\11\0\13\20\10\0"+
    "\7\20\11\0\3\20\7\0\2\20\1\0\30\20\2\0"+
    "\1\20\1\0\1\20\11\0\1\20\1\u018d\11\20\10\0"+
    "\7\20\11\0\3\20\7\0\2\20\1\0\30\20\2\0"+
    "\1\20\1\0\1\20\11\0\1\20\1\u018e\11\20\10\0"+
    "\7\20\11\0\3\20\7\0\2\20\1\0\30\20\2\0"+
    "\1\20\1\0\1\20\11\0\2\20\1\u018f\10\20\10\0"+
    "\7\20\11\0\3\20\7\0\2\20\1\0\27\20\1\u0190"+
    "\2\0\1\20\1\0\1\20\11\0\13\20\10\0\7\20"+
    "\11\0\3\20\7\0\2\20\1\0\30\20\2\0\1\20"+
    "\1\0\1\20\11\0\1\20\1\u0191\11\20\10\0\7\20"+
    "\51\0\1\u0192\65\0\3\20\7\0\2\20\1\0\24\20"+
    "\1\u0193\3\20\2\0\1\20\1\0\1\20\11\0\13\20"+
    "\10\0\7\20\15\0\1\u0194\1\0\1\u0194\110\0\3\315"+
    "\1\0\1\315\1\0\5\315\1\u0195\1\315\1\u0195\41\315"+
    "\1\0\46\315\3\0\1\u0196\125\0\1\u0197\131\0\3\131"+
    "\7\0\2\131\1\0\21\131\1\u0198\6\131\2\0\1\131"+
    "\1\0\1\131\11\0\13\131\10\0\7\131\11\0\3\131"+
    "\7\0\1\u0199\1\131\1\0\30\131\2\0\1\131\1\0"+
    "\1\131\11\0\13\131\10\0\7\131\5\0\1\330\1\0"+
    "\2\330\3\135\7\0\2\135\1\0\14\135\1\137\1\140"+
    "\12\135\2\0\1\135\1\0\1\135\3\0\1\331\5\0"+
    "\13\135\7\0\1\330\2\135\1\143\4\135\1\0\1\330"+
    "\3\0\1\330\1\0\2\330\3\135\7\0\2\135\1\0"+
    "\23\135\1\u019a\4\135\2\0\1\135\1\0\1\135\3\0"+
    "\1\331\5\0\13\135\7\0\1\330\7\135\1\0\1\330"+
    "\3\0\1\330\1\0\2\330\3\135\7\0\2\135\1\0"+
    "\24\135\1\u019b\3\135\2\0\1\135\1\0\1\135\3\0"+
    "\1\331\5\0\13\135\7\0\1\330\7\135\1\0\1\330"+
    "\1\340\1\151\1\u014d\123\340\45\0\1\u019c\101\0\1\u019d"+
    "\113\0\3\20\7\0\2\20\1\0\30\20\2\0\1\20"+
    "\1\0\1\u019e\11\0\13\20\10\0\7\20\11\0\3\20"+
    "\7\0\2\20\1\0\22\20\1\u019f\5\20\2\0\1\20"+
    "\1\0\1\20\11\0\13\20\10\0\7\20\11\0\3\20"+
    "\7\0\2\20\1\0\3\20\1\u01a0\24\20\2\0\1\20"+
    "\1\0\1\20\11\0\13\20\10\0\7\20\11\0\3\20"+
    "\7\0\2\20\1\0\15\20\1\u01a1\12\20\2\0\1\20"+
    "\1\0\1\20\11\0\13\20\10\0\7\20\11\0\3\20"+
    "\7\0\2\20\1\0\1\20\1\u01a0\26\20\2\0\1\20"+
    "\1\0\1\20\11\0\13\20\10\0\7\20\11\0\3\20"+
    "\7\0\2\20\1\0\3\20\1\u01a2\24\20\2\0\1\20"+
    "\1\0\1\20\11\0\13\20\10\0\7\20\11\0\3\20"+
    "\7\0\2\20\1\0\6\20\1\u01a3\21\20\2\0\1\20"+
    "\1\0\1\20\11\0\13\20\10\0\7\20\11\0\3\20"+
    "\7\0\2\20\1\0\13\20\1\u01a4\14\20\2\0\1\20"+
    "\1\0\1\20\11\0\13\20\10\0\7\20\11\0\3\20"+
    "\7\0\2\20\1\0\13\20\1\u01a5\14\20\2\0\1\20"+
    "\1\0\1\20\11\0\13\20\10\0\7\20\11\0\3\20"+
    "\7\0\2\20\1\0\11\20\1\u01a6\16\20\2\0\1\20"+
    "\1\0\1\20\11\0\13\20\10\0\7\20\11\0\3\20"+
    "\7\0\1\20\1\u01a7\1\0\30\20\2\0\1\20\1\0"+
    "\1\20\11\0\13\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\24\20\1\u01a8\3\20\2\0\1\20\1\0"+
    "\1\20\11\0\13\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\30\20\2\0\1\20\1\0\1\u01a9\11\0"+
    "\13\20\10\0\7\20\11\0\3\20\7\0\1\u01aa\1\20"+
    "\1\0\30\20\2\0\1\20\1\0\1\20\11\0\13\20"+
    "\10\0\7\20\11\0\3\20\7\0\2\20\1\0\23\20"+
    "\1\u01ab\4\20\2\0\1\20\1\0\1\20\11\0\13\20"+
    "\10\0\7\20\11\0\3\20\7\0\2\20\1\0\30\20"+
    "\2\0\1\u01ac\1\0\1\20\11\0\13\20\10\0\7\20"+
    "\11\0\3\20\7\0\2\20\1\0\30\20\2\0\1\20"+
    "\1\0\1\20\11\0\6\20\1\u01ad\4\20\10\0\7\20"+
    "\11\0\3\20\7\0\2\20\1\0\23\20\1\u01ae\4\20"+
    "\2\0\1\20\1\0\1\20\11\0\13\20\10\0\7\20"+
    "\11\0\3\20\7\0\2\20\1\0\22\20\1\u01af\5\20"+
    "\2\0\1\20\1\0\1\20\11\0\13\20\10\0\7\20"+
    "\11\0\3\20\7\0\2\20\1\0\30\20\2\0\1\20"+
    "\1\0\1\u01b0\11\0\13\20\10\0\7\20\11\0\3\20"+
    "\7\0\1\u01b1\1\20\1\0\30\20\2\0\1\20\1\0"+
    "\1\20\11\0\13\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\20\20\1\u01b2\7\20\2\0\1\20\1\0"+
    "\1\20\11\0\13\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\24\20\1\u01b3\3\20\2\0\1\20\1\0"+
    "\1\20\11\0\13\20\10\0\7\20\11\0\3\20\7\0"+
    "\1\u01b4\1\20\1\0\30\20\2\0\1\20\1\0\1\20"+
    "\11\0\13\20\10\0\7\20\11\0\3\20\7\0\2\20"+
    "\1\0\30\20\2\0\1\20\1\0\1\20\11\0\12\20"+
    "\1\u01b5\10\0\7\20\11\0\3\20\7\0\2\20\1\0"+
    "\26\20\1\u01b6\1\20\2\0\1\20\1\0\1\20\11\0"+
    "\13\20\10\0\7\20\11\0\3\20\7\0\2\20\1\0"+
    "\25\20\1\u01b7\2\20\2\0\1\20\1\0\1\20\11\0"+
    "\13\20\10\0\7\20\11\0\3\20\7\0\2\20\1\0"+
    "\30\20\2\0\1\20\1\0\1\u01b8\11\0\13\20\10\0"+
    "\7\20\11\0\3\20\7\0\2\20\1\0\26\20\1\u01b9"+
    "\1\20\2\0\1\20\1\0\1\20\11\0\13\20\10\0"+
    "\7\20\11\0\3\243\7\0\2\243\1\0\23\243\1\u01ba"+
    "\4\243\2\0\1\243\1\0\1\243\11\0\13\243\10\0"+
    "\7\243\11\0\3\20\7\0\2\20\1\0\30\20\2\0"+
    "\1\20\1\0\1\20\11\0\2\20\1\u01bb\10\20\10\0"+
    "\7\20\11\0\3\20\7\0\2\20\1\0\25\20\1\u01bc"+
    "\2\20\2\0\1\20\1\0\1\20\11\0\13\20\10\0"+
    "\7\20\11\0\3\20\7\0\2\20\1\0\25\20\1\u01bd"+
    "\2\20\2\0\1\20\1\0\1\20\11\0\13\20\10\0"+
    "\7\20\11\0\3\20\7\0\1\u01be\1\20\1\0\30\20"+
    "\2\0\1\20\1\0\1\20\11\0\13\20\10\0\7\20"+
    "\11\0\3\20\7\0\2\20\1\0\30\20\2\0\1\20"+
    "\1\0\1\20\11\0\2\20\1\u01bf\10\20\10\0\7\20"+
    "\11\0\3\20\7\0\2\20\1\0\24\20\1\u01c0\3\20"+
    "\2\0\1\20\1\0\1\20\11\0\13\20\10\0\7\20"+
    "\11\0\3\20\7\0\2\20\1\0\30\20\2\0\1\20"+
    "\1\0\1\20\11\0\1\20\1\u01c1\11\20\10\0\7\20"+
    "\11\0\3\20\7\0\2\20\1\0\24\20\1\u01c2\3\20"+
    "\2\0\1\20\1\0\1\20\11\0\13\20\10\0\7\20"+
    "\11\0\3\20\7\0\1\u01a7\1\20\1\0\30\20\2\0"+
    "\1\20\1\0\1\20\11\0\13\20\10\0\7\20\11\0"+
    "\3\20\7\0\2\20\1\0\20\20\1\u01c3\7\20\2\0"+
    "\1\20\1\0\1\20\11\0\13\20\10\0\7\20\11\0"+
    "\3\20\7\0\2\20\1\0\30\20\2\0\1\20\1\0"+
    "\1\20\11\0\6\20\1\u01c4\4\20\10\0\7\20\11\0"+
    "\3\20\7\0\2\20\1\0\25\20\1\u01c5\2\20\2\0"+
    "\1\20\1\0\1\20\11\0\13\20\10\0\7\20\11\0"+
    "\3\20\7\0\2\20\1\0\24\20\1\u01c6\3\20\2\0"+
    "\1\20\1\0\1\20\11\0\13\20\10\0\7\20\11\0"+
    "\3\20\7\0\2\20\1\0\27\20\1\u01c7\2\0\1\20"+
    "\1\0\1\20\11\0\13\20\10\0\7\20\11\0\3\20"+
    "\7\0\1\u01c8\1\20\1\0\30\20\2\0\1\20\1\0"+
    "\1\20\11\0\13\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\30\20\2\0\1\20\1\0\1\20\11\0"+
    "\2\20\1\u01c9\10\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\30\20\2\0\1\20\1\0\1\u01ca\11\0"+
    "\13\20\10\0\7\20\11\0\3\20\7\0\2\20\1\0"+
    "\22\20\1\u01cb\5\20\2\0\1\20\1\0\1\20\11\0"+
    "\13\20\10\0\7\20\11\0\3\20\7\0\2\20\1\0"+
    "\27\20\1\u01cc\2\0\1\20\1\0\1\20\11\0\13\20"+
    "\10\0\7\20\11\0\3\20\7\0\2\20\1\0\30\20"+
    "\2\0\1\20\1\0\1\20\11\0\13\20\10\0\1\u01cd"+
    "\6\20\11\0\3\20\7\0\1\u01ce\1\20\1\0\30\20"+
    "\2\0\1\20\1\0\1\20\11\0\13\20\10\0\7\20"+
    "\52\0\1\u01cf\64\0\3\20\7\0\2\20\1\0\21\20"+
    "\1\u01d0\6\20\2\0\1\20\1\0\1\20\11\0\13\20"+
    "\10\0\7\20\11\0\1\u01d1\11\0\2\u01d1\1\0\30\u01d1"+
    "\2\0\1\u01d1\1\0\1\u01d1\11\0\13\u01d1\10\0\4\u01d1"+
    "\2\0\1\u01d1\2\0\3\315\1\0\1\315\1\0\1\315"+
    "\1\u01d2\11\315\2\u01d2\1\315\30\u01d2\2\315\1\u01d2\1\0"+
    "\1\u01d2\11\315\13\u01d2\10\315\4\u01d2\2\315\1\u01d2\2\315"+
    "\7\0\3\131\7\0\2\131\1\0\22\131\1\u01d3\5\131"+
    "\2\0\1\131\1\0\1\131\11\0\13\131\10\0\7\131"+
    "\11\0\3\131\7\0\2\131\1\0\23\131\1\u01d4\4\131"+
    "\2\0\1\131\1\0\1\131\11\0\13\131\10\0\7\131"+
    "\5\0\1\330\1\0\2\330\3\135\7\0\2\135\1\0"+
    "\23\135\1\u01d5\4\135\2\0\1\135\1\0\1\135\3\0"+
    "\1\331\5\0\13\135\7\0\1\330\7\135\1\0\1\330"+
    "\3\0\1\330\1\0\2\330\3\135\7\0\2\135\1\0"+
    "\21\135\1\u01d6\6\135\2\0\1\135\1\0\1\135\3\0"+
    "\1\331\5\0\13\135\7\0\1\330\7\135\1\0\1\330"+
    "\46\0\1\u01d7\126\0\1\u01d8\65\0\3\20\7\0\2\20"+
    "\1\0\30\20\2\0\1\20\1\0\1\20\11\0\1\u01d9"+
    "\12\20\10\0\7\20\11\0\3\20\7\0\2\20\1\0"+
    "\27\20\1\u01da\2\0\1\20\1\0\1\20\11\0\13\20"+
    "\10\0\7\20\11\0\3\20\7\0\1\20\1\u01a3\1\0"+
    "\30\20\2\0\1\20\1\0\1\20\11\0\13\20\10\0"+
    "\7\20\11\0\3\20\7\0\1\20\1\u01db\1\0\30\20"+
    "\2\0\1\20\1\0\1\20\11\0\13\20\10\0\7\20"+
    "\11\0\3\20\7\0\2\20\1\0\10\20\1\u01dc\17\20"+
    "\2\0\1\20\1\0\1\20\11\0\13\20\10\0\7\20"+
    "\11\0\3\20\7\0\2\20\1\0\1\u01dd\27\20\2\0"+
    "\1\20\1\0\1\20\11\0\13\20\10\0\7\20\11\0"+
    "\3\20\7\0\2\20\1\0\14\20\1\u01de\13\20\2\0"+
    "\1\20\1\0\1\20\11\0\13\20\10\0\7\20\11\0"+
    "\3\20\7\0\2\20\1\0\2\20\1\u01df\25\20\2\0"+
    "\1\20\1\0\1\20\11\0\13\20\10\0\7\20\11\0"+
    "\3\20\7\0\2\20\1\0\16\20\1\u01e0\11\20\2\0"+
    "\1\20\1\0\1\20\11\0\13\20\10\0\7\20\11\0"+
    "\3\20\7\0\2\20\1\0\22\20\1\u01e1\5\20\2\0"+
    "\1\20\1\0\1\20\11\0\13\20\10\0\7\20\11\0"+
    "\3\20\7\0\2\20\1\0\30\20\2\0\1\20\1\0"+
    "\1\20\11\0\4\20\1\u01e2\6\20\10\0\7\20\11\0"+
    "\3\20\7\0\2\20\1\0\30\20\2\0\1\20\1\0"+
    "\1\20\11\0\4\20\1\u01e3\6\20\10\0\7\20\11\0"+
    "\3\20\7\0\2\20\1\0\30\20\2\0\1\20\1\0"+
    "\1\20\11\0\13\20\10\0\1\20\1\u01e4\5\20\11\0"+
    "\3\20\7\0\2\20\1\0\20\20\1\u01e5\7\20\2\0"+
    "\1\20\1\0\1\20\11\0\13\20\10\0\7\20\11\0"+
    "\3\20\7\0\2\20\1\0\30\20\2\0\1\u01e6\1\0"+
    "\1\20\11\0\13\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\25\20\1\u01e7\2\20\2\0\1\20\1\0"+
    "\1\20\11\0\13\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\22\20\1\u01e8\5\20\2\0\1\20\1\0"+
    "\1\20\11\0\13\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\25\20\1\u01e9\2\20\2\0\1\20\1\0"+
    "\1\20\11\0\13\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\30\20\2\0\1\20\1\0\1\20\11\0"+
    "\1\20\1\u01ea\11\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\22\20\1\u01eb\5\20\2\0\1\20\1\0"+
    "\1\20\11\0\13\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\30\20\2\0\1\20\1\0\1\20\11\0"+
    "\1\u01ec\12\20\10\0\7\20\11\0\3\20\7\0\2\20"+
    "\1\0\30\20\2\0\1\20\1\0\1\u01ed\11\0\13\20"+
    "\10\0\7\20\11\0\3\20\7\0\2\20\1\0\30\20"+
    "\2\0\1\20\1\0\1\20\11\0\3\20\1\u01ee\7\20"+
    "\10\0\7\20\11\0\3\20\7\0\2\20\1\0\20\20"+
    "\1\u01ef\7\20\2\0\1\20\1\0\1\20\11\0\13\20"+
    "\10\0\7\20\11\0\3\20\7\0\2\20\1\0\30\20"+
    "\2\0\1\20\1\0\1\u01f0\11\0\13\20\10\0\7\20"+
    "\11\0\3\20\7\0\2\20\1\0\30\20\2\0\1\20"+
    "\1\0\1\20\11\0\1\20\1\u01f1\11\20\10\0\7\20"+
    "\11\0\3\20\7\0\2\20\1\0\30\20\2\0\1\20"+
    "\1\0\1\20\11\0\13\20\10\0\1\u01f2\6\20\11\0"+
    "\3\20\7\0\2\20\1\0\30\20\2\0\1\20\1\0"+
    "\1\20\11\0\2\20\1\u01f3\10\20\10\0\7\20\11\0"+
    "\3\20\7\0\2\20\1\0\20\20\1\u01f4\7\20\2\0"+
    "\1\20\1\0\1\20\11\0\13\20\10\0\7\20\11\0"+
    "\3\20\7\0\2\20\1\0\24\20\1\u01f5\3\20\2\0"+
    "\1\20\1\0\1\20\11\0\13\20\10\0\7\20\11\0"+
    "\3\20\7\0\2\20\1\0\20\20\1\u01f6\7\20\2\0"+
    "\1\20\1\0\1\20\11\0\13\20\10\0\7\20\11\0"+
    "\3\20\7\0\2\20\1\0\24\20\1\u01f7\3\20\2\0"+
    "\1\20\1\0\1\20\11\0\13\20\10\0\7\20\11\0"+
    "\3\20\7\0\2\20\1\0\25\20\1\u01f8\2\20\2\0"+
    "\1\20\1\0\1\20\11\0\13\20\10\0\7\20\11\0"+
    "\3\u01d1\1\0\1\u01f9\1\0\1\u01f9\3\0\2\u01d1\1\0"+
    "\30\u01d1\2\0\1\u01d1\1\0\1\u01d1\11\0\13\u01d1\10\0"+
    "\7\u01d1\2\0\3\315\1\0\1\315\1\0\1\315\3\u01d2"+
    "\1\315\1\u01fa\1\315\1\u01fa\3\315\2\u01d2\1\315\30\u01d2"+
    "\2\315\1\u01d2\1\0\1\u01d2\11\315\13\u01d2\10\315\7\u01d2"+
    "\2\315\7\0\3\131\7\0\2\131\1\0\23\131\1\u01fb"+
    "\4\131\2\0\1\131\1\0\1\131\11\0\13\131\10\0"+
    "\7\131\11\0\3\131\7\0\2\131\1\0\24\131\1\u01fc"+
    "\3\131\2\0\1\131\1\0\1\131\11\0\13\131\10\0"+
    "\7\131\5\0\1\330\1\0\2\330\3\135\7\0\2\135"+
    "\1\0\25\135\1\u01fd\2\135\2\0\1\135\1\0\1\135"+
    "\3\0\1\331\5\0\13\135\7\0\1\330\7\135\1\0"+
    "\1\330\47\0\1\u01fe\126\0\1\u01ff\64\0\3\20\7\0"+
    "\2\20\1\0\23\20\1\u0200\4\20\2\0\1\20\1\0"+
    "\1\20\11\0\13\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\14\20\1\u0201\13\20\2\0\1\20\1\0"+
    "\1\20\11\0\13\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\11\20\1\u0202\16\20\2\0\1\20\1\0"+
    "\1\20\11\0\13\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\1\u0203\27\20\2\0\1\20\1\0\1\20"+
    "\11\0\13\20\10\0\7\20\11\0\3\20\7\0\2\20"+
    "\1\0\14\20\1\u01a3\13\20\2\0\1\20\1\0\1\20"+
    "\11\0\13\20\10\0\7\20\11\0\3\20\7\0\2\20"+
    "\1\0\11\20\1\u01a3\16\20\2\0\1\20\1\0\1\20"+
    "\11\0\13\20\10\0\7\20\11\0\3\20\7\0\2\20"+
    "\1\0\12\20\1\u0204\15\20\2\0\1\20\1\0\1\20"+
    "\11\0\13\20\10\0\7\20\11\0\3\20\7\0\2\20"+
    "\1\0\26\20\1\u0205\1\20\2\0\1\20\1\0\1\20"+
    "\11\0\13\20\10\0\7\20\11\0\3\20\7\0\1\u0206"+
    "\1\20\1\0\30\20\2\0\1\20\1\0\1\20\11\0"+
    "\13\20\10\0\7\20\11\0\3\20\7\0\2\20\1\0"+
    "\30\20\2\0\1\20\1\0\1\20\11\0\2\20\1\u0207"+
    "\10\20\10\0\7\20\11\0\3\20\7\0\2\20\1\0"+
    "\20\20\1\u0208\7\20\2\0\1\20\1\0\1\20\11\0"+
    "\13\20\10\0\7\20\11\0\3\20\7\0\1\u0209\1\20"+
    "\1\0\30\20\2\0\1\20\1\0\1\20\11\0\13\20"+
    "\10\0\7\20\11\0\3\20\7\0\2\20\1\0\24\20"+
    "\1\u020a\3\20\2\0\1\20\1\0\1\20\11\0\13\20"+
    "\10\0\7\20\11\0\3\20\7\0\2\20\1\0\20\20"+
    "\1\u020b\7\20\2\0\1\20\1\0\1\20\11\0\13\20"+
    "\10\0\7\20\11\0\3\20\7\0\2\20\1\0\30\20"+
    "\2\0\1\20\1\0\1\20\11\0\2\20\1\u020c\10\20"+
    "\10\0\7\20\11\0\3\20\7\0\2\20\1\0\30\20"+
    "\2\0\1\20\1\0\1\20\11\0\2\20\1\u020d\10\20"+
    "\10\0\7\20\11\0\3\20\7\0\1\u020e\1\20\1\0"+
    "\30\20\2\0\1\20\1\0\1\20\11\0\13\20\10\0"+
    "\7\20\11\0\3\20\7\0\2\20\1\0\30\20\2\0"+
    "\1\u020f\1\0\1\20\11\0\13\20\10\0\7\20\11\0"+
    "\3\20\7\0\2\20\1\0\21\20\1\u0210\6\20\2\0"+
    "\1\20\1\0\1\20\11\0\13\20\10\0\7\20\11\0"+
    "\3\20\7\0\2\20\1\0\30\20\2\0\1\20\1\0"+
    "\1\20\11\0\6\20\1\u0211\4\20\10\0\7\20\11\0"+
    "\3\20\7\0\1\u0212\1\20\1\0\30\20\2\0\1\20"+
    "\1\0\1\20\11\0\13\20\10\0\7\20\11\0\3\20"+
    "\7\0\2\20\1\0\20\20\1\u0213\7\20\2\0\1\20"+
    "\1\0\1\20\11\0\13\20\10\0\7\20\11\0\3\20"+
    "\7\0\2\20\1\0\24\20\1\u0214\3\20\2\0\1\20"+
    "\1\0\1\20\11\0\13\20\10\0\7\20\11\0\3\20"+
    "\7\0\1\u0215\1\20\1\0\30\20\2\0\1\20\1\0"+
    "\1\20\11\0\13\20\10\0\7\20\20\0\1\u0216\107\0"+
    "\3\315\1\0\1\315\1\0\10\315\1\u0217\40\315\1\0"+
    "\46\315\7\0\3\131\7\0\2\131\1\0\24\131\1\u0218"+
    "\3\131\2\0\1\131\1\0\1\131\11\0\13\131\10\0"+
    "\7\131\11\0\3\131\7\0\2\131\1\0\25\131\1\u0219"+
    "\2\131\2\0\1\131\1\0\1\131\11\0\13\131\10\0"+
    "\7\131\52\0\1\u021a\126\0\1\u021b\63\0\3\20\7\0"+
    "\2\20\1\0\17\20\1\u021c\10\20\2\0\1\20\1\0"+
    "\1\20\11\0\13\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\2\20\1\u021d\25\20\2\0\1\20\1\0"+
    "\1\20\11\0\13\20\10\0\7\20\11\0\3\20\7\0"+
    "\2\20\1\0\5\20\1\u01a3\22\20\2\0\1\20\1\0"+
    "\1\20\11\0\13\20\10\0\7\20\11\0\3\20\7\0"+
    "\1\u021e\1\20\1\0\30\20\2\0\1\20\1\0\1\20"+
    "\11\0\13\20\10\0\7\20\11\0\3\20\7\0\2\20"+
    "\1\0\20\20\1\u021f\7\20\2\0\1\20\1\0\1\20"+
    "\11\0\13\20\10\0\7\20\11\0\3\20\7\0\1\u0220"+
    "\1\20\1\0\30\20\2\0\1\20\1\0\1\20\11\0"+
    "\13\20\10\0\7\20\11\0\3\20\7\0\2\20\1\0"+
    "\1\u0221\27\20\2\0\1\20\1\0\1\20\11\0\13\20"+
    "\10\0\7\20\11\0\3\20\7\0\1\u0222\1\20\1\0"+
    "\30\20\2\0\1\20\1\0\1\20\11\0\13\20\10\0"+
    "\7\20\11\0\3\20\7\0\2\20\1\0\20\20\1\u0223"+
    "\7\20\2\0\1\20\1\0\1\20\11\0\13\20\10\0"+
    "\7\20\11\0\3\20\7\0\2\20\1\0\22\20\1\u0224"+
    "\5\20\2\0\1\20\1\0\1\20\11\0\13\20\10\0"+
    "\7\20\11\0\3\20\7\0\2\20\1\0\22\20\1\u0225"+
    "\5\20\2\0\1\20\1\0\1\20\11\0\13\20\10\0"+
    "\7\20\11\0\3\20\7\0\2\20\1\0\22\20\1\u0226"+
    "\5\20\2\0\1\20\1\0\1\20\11\0\13\20\10\0"+
    "\7\20\11\0\3\20\7\0\2\20\1\0\30\20\2\0"+
    "\1\20\1\0\1\20\11\0\6\20\1\u0227\4\20\10\0"+
    "\7\20\11\0\3\20\7\0\2\20\1\0\24\20\1\u0228"+
    "\3\20\2\0\1\20\1\0\1\20\11\0\13\20\10\0"+
    "\7\20\11\0\3\20\7\0\1\u0229\1\20\1\0\30\20"+
    "\2\0\1\20\1\0\1\20\11\0\13\20\10\0\7\20"+
    "\16\0\1\u013b\111\0\3\315\1\0\1\315\1\0\6\315"+
    "\1\u013d\42\315\1\0\46\315\7\0\3\131\7\0\2\131"+
    "\1\0\25\131\1\u022a\2\131\2\0\1\131\1\0\1\131"+
    "\11\0\13\131\10\0\7\131\11\0\3\131\7\0\2\131"+
    "\1\0\26\131\1\u022b\1\131\2\0\1\131\1\0\1\131"+
    "\11\0\13\131\10\0\7\131\53\0\1\u022c\126\0\1\u022d"+
    "\62\0\3\20\7\0\2\20\1\0\13\20\1\u022e\14\20"+
    "\2\0\1\20\1\0\1\20\11\0\13\20\10\0\7\20"+
    "\11\0\3\20\7\0\2\20\1\0\12\20\1\u022f\15\20"+
    "\2\0\1\20\1\0\1\20\11\0\13\20\10\0\7\20"+
    "\11\0\3\20\7\0\1\u0230\1\20\1\0\30\20\2\0"+
    "\1\20\1\0\1\20\11\0\13\20\10\0\7\20\11\0"+
    "\3\20\7\0\2\20\1\0\21\20\1\u0231\6\20\2\0"+
    "\1\20\1\0\1\20\11\0\13\20\10\0\7\20\11\0"+
    "\3\20\7\0\2\20\1\0\21\20\1\u0232\6\20\2\0"+
    "\1\20\1\0\1\20\11\0\13\20\10\0\7\20\11\0"+
    "\3\20\7\0\1\u0233\1\20\1\0\30\20\2\0\1\20"+
    "\1\0\1\20\11\0\13\20\10\0\7\20\11\0\3\20"+
    "\7\0\2\20\1\0\24\20\1\u0234\3\20\2\0\1\20"+
    "\1\0\1\20\11\0\13\20\10\0\7\20\11\0\3\20"+
    "\7\0\2\20\1\0\24\20\1\u0235\3\20\2\0\1\20"+
    "\1\0\1\20\11\0\13\20\10\0\7\20\11\0\3\20"+
    "\7\0\2\20\1\0\27\20\1\u0236\2\0\1\20\1\0"+
    "\1\20\11\0\13\20\10\0\7\20\11\0\3\131\7\0"+
    "\2\131\1\0\26\131\1\u0237\1\131\2\0\1\131\1\0"+
    "\1\131\11\0\13\131\10\0\7\131\11\0\3\131\7\0"+
    "\2\131\1\0\20\131\1\u0238\7\131\2\0\1\131\1\0"+
    "\1\131\11\0\13\131\10\0\7\131\54\0\1\u0239\117\0"+
    "\1\u023a\70\0\3\20\7\0\2\20\1\0\10\20\1\u01a0"+
    "\17\20\2\0\1\20\1\0\1\20\11\0\13\20\10\0"+
    "\7\20\11\0\3\20\7\0\2\20\1\0\3\20\1\u01a3"+
    "\24\20\2\0\1\20\1\0\1\20\11\0\13\20\10\0"+
    "\7\20\11\0\3\20\7\0\2\20\1\0\22\20\1\u023b"+
    "\5\20\2\0\1\20\1\0\1\20\11\0\13\20\10\0"+
    "\7\20\11\0\3\20\7\0\2\20\1\0\30\20\2\0"+
    "\1\20\1\0\1\20\11\0\1\u023c\12\20\10\0\7\20"+
    "\11\0\3\20\7\0\2\20\1\0\23\20\1\u023d\4\20"+
    "\2\0\1\20\1\0\1\20\11\0\13\20\10\0\7\20"+
    "\11\0\3\131\7\0\2\131\1\0\20\131\1\u023e\7\131"+
    "\2\0\1\131\1\0\1\131\11\0\13\131\10\0\7\131"+
    "\11\0\3\131\7\0\2\131\1\0\24\131\1\u023f\3\131"+
    "\2\0\1\131\1\0\1\131\11\0\13\131\10\0\7\131"+
    "\46\0\1\u0240\131\0\1\u0241\64\0\3\20\7\0\2\20"+
    "\1\0\20\20\1\u0242\7\20\2\0\1\20\1\0\1\20"+
    "\11\0\13\20\10\0\7\20\11\0\3\131\7\0\2\131"+
    "\1\0\24\131\1\u0243\3\131\2\0\1\131\1\0\1\131"+
    "\11\0\13\131\10\0\7\131\52\0\1\u0244\64\0\3\20"+
    "\7\0\1\u0245\1\20\1\0\30\20\2\0\1\20\1\0"+
    "\1\20\11\0\13\20\10\0\7\20\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[37754];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\1\1\0\1\1\3\0\1\11\7\1\1\11"+
    "\1\1\3\11\30\1\1\11\1\1\5\11\14\1\1\11"+
    "\3\1\1\11\4\1\1\11\16\1\1\11\10\1\1\0"+
    "\1\11\1\1\1\11\1\0\1\11\2\1\1\0\1\1"+
    "\5\0\2\11\1\0\2\11\1\0\1\11\4\1\2\11"+
    "\36\1\2\0\1\1\1\0\1\11\5\1\1\11\1\1"+
    "\1\11\24\1\1\11\1\0\6\11\1\0\1\1\1\11"+
    "\1\1\1\0\1\11\2\1\1\11\3\1\1\11\4\1"+
    "\1\0\1\11\6\1\2\0\1\11\1\0\1\1\1\0"+
    "\2\1\1\11\56\1\2\11\2\0\1\11\5\1\3\11"+
    "\24\1\1\11\1\0\1\1\1\0\1\11\1\1\2\11"+
    "\2\1\2\11\11\1\1\0\1\1\2\0\47\1\2\11"+
    "\30\1\1\0\1\1\1\0\1\1\2\11\4\1\2\0"+
    "\61\1\1\11\1\1\1\0\5\1\2\0\40\1\1\0"+
    "\4\1\2\0\32\1\2\0\20\1\2\0\13\1\2\0"+
    "\5\1\1\0\1\11\2\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[581];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public HackLexer() {
    this((java.io.Reader)null);
  }

  public static String hdnd_identifier = "";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public HackLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(HD); return DQ_STRING;
            }
          case 177: break;
          case 2: 
            { yybegin(ND); return ND_CONTENTS;
            }
          case 178: break;
          case 3: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          case 179: break;
          case 4: 
            { return DIV;
            }
          case 180: break;
          case 5: 
            { return MULT;
            }
          case 181: break;
          case 6: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          case 182: break;
          case 7: 
            { return COMMENT;
            }
          case 183: break;
          case 8: 
            { return NAME;
            }
          case 184: break;
          case 9: 
            { return DECIMAL_LITERAL;
            }
          case 185: break;
          case 10: 
            { return B_SLASH;
            }
          case 186: break;
          case 11: 
            { return L_BRACKET;
            }
          case 187: break;
          case 12: 
            { yybegin(DQ_STR); return D_QUOTE;
            }
          case 188: break;
          case 13: 
            { return R_BRACKET;
            }
          case 189: break;
          case 14: 
            { return SUB;
            }
          case 190: break;
          case 15: 
            { return PERIOD;
            }
          case 191: break;
          case 16: 
            { return ADD;
            }
          case 192: break;
          case 17: 
            { return T_GENERIC;
            }
          case 193: break;
          case 18: 
            { return LT;
            }
          case 194: break;
          case 19: 
            { return QUESTION_MARK;
            }
          case 195: break;
          case 20: 
            { return SEMICOLON;
            }
          case 196: break;
          case 21: 
            { return COLON;
            }
          case 197: break;
          case 22: 
            { return COMMA;
            }
          case 198: break;
          case 23: 
            { return L_PAREN;
            }
          case 199: break;
          case 24: 
            { return R_PAREN;
            }
          case 200: break;
          case 25: 
            { return L_BRACE;
            }
          case 201: break;
          case 26: 
            { return R_BRACE;
            }
          case 202: break;
          case 27: 
            { return EQ_ASSIGN;
            }
          case 203: break;
          case 28: 
            { return NOT;
            }
          case 204: break;
          case 29: 
            { return GT;
            }
          case 205: break;
          case 30: 
            { return MOD;
            }
          case 206: break;
          case 31: 
            { return BIT_NOT;
            }
          case 207: break;
          case 32: 
            { return BIT_AND;
            }
          case 208: break;
          case 33: 
            { return BIT_OR;
            }
          case 209: break;
          case 34: 
            { return BIT_XOR;
            }
          case 210: break;
          case 35: 
            { return AT_SIGN;
            }
          case 211: break;
          case 36: 
            { yybegin(DQ_STR); return DQ_STRING;
            }
          case 212: break;
          case 37: 
            { yybegin(YYINITIAL); return D_QUOTE;
            }
          case 213: break;
          case 38: 
            { hdnd_identifier = yytext().toString(); yybegin(HD); return HD_ID;
            }
          case 214: break;
          case 39: 
            { yybegin(YYINITIAL); return FUNCTION_NAME;
            }
          case 215: break;
          case 40: 
            { yybegin(YYINITIAL); return L_PAREN;
            }
          case 216: break;
          case 41: 
            { yybegin(YYINITIAL); return MEMBER_NAME;
            }
          case 217: break;
          case 42: 
            { yybegin(YYINITIAL); return CONST_NAME;
            }
          case 218: break;
          case 43: 
            { return DIV_ASSIGN;
            }
          case 219: break;
          case 44: 
            { return EXP;
            }
          case 220: break;
          case 45: 
            { return MULT_ASSIGN;
            }
          case 221: break;
          case 46: 
            { return OCTAL_LITERAL;
            }
          case 222: break;
          case 47: 
            { return FLOAT_LITERAL;
            }
          case 223: break;
          case 48: 
            { return SQ_STRING;
            }
          case 224: break;
          case 49: 
            { return DECR;
            }
          case 225: break;
          case 50: 
            { return SUB_ASSIGN;
            }
          case 226: break;
          case 51: 
            { yybegin(MEMB_NAME); return ARROW;
            }
          case 227: break;
          case 52: 
            { return CONCAT_ASSIGN;
            }
          case 228: break;
          case 53: 
            { return INCR;
            }
          case 229: break;
          case 54: 
            { return ADD_ASSIGN;
            }
          case 230: break;
          case 55: 
            { return OR;
            }
          case 231: break;
          case 56: 
            { return DO;
            }
          case 232: break;
          case 57: 
            { return LT_EQ;
            }
          case 233: break;
          case 58: 
            { return NULL_COALESCE;
            }
          case 234: break;
          case 59: 
            { return VARIABLE_NAME;
            }
          case 235: break;
          case 60: 
            { return IF;
            }
          case 236: break;
          case 61: 
            { yybegin(SCOPE_NAME); return SCOPE;
            }
          case 237: break;
          case 62: 
            { return EQ;
            }
          case 238: break;
          case 63: 
            { return KV_ARROW;
            }
          case 239: break;
          case 64: 
            { return NEQ;
            }
          case 240: break;
          case 65: 
            { return AS;
            }
          case 241: break;
          case 66: 
            { return GT_EQ;
            }
          case 242: break;
          case 67: 
            { return MOD_ASSIGN;
            }
          case 243: break;
          case 68: 
            { return BIT_AND_ASSIGN;
            }
          case 244: break;
          case 69: 
            { return AND;
            }
          case 245: break;
          case 70: 
            { return BIT_OR_ASSIGN;
            }
          case 246: break;
          case 71: 
            { return BIT_XOR_ASSIGN;
            }
          case 247: break;
          case 72: 
            { yybegin(DQ_STR); return DQ_ESCAPE_SEQ;
            }
          case 248: break;
          case 73: 
            { yybegin(DQ_STR); return DQ_VAR;
            }
          case 249: break;
          case 74: 
            { yybegin(HD); return DQ_ESCAPE_SEQ;
            }
          case 250: break;
          case 75: 
            { yybegin(HD); return DQ_VAR;
            }
          case 251: break;
          case 76: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { if (yytext().toString().equals(hdnd_identifier)) { yybegin(YYINITIAL); return HD_ID; } else { yybegin(HD); return DQ_STRING; }
            }
          case 252: break;
          case 77: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { if (yytext().toString().equals(hdnd_identifier)) { yybegin(YYINITIAL); return ND_ID; } else { yybegin(ND); return ND_CONTENTS; }
            }
          case 253: break;
          case 78: 
            { yypushback(1); yybegin(YYINITIAL); return FUNCTION_NAME;
            }
          case 254: break;
          case 79: 
            { yybegin(YYINITIAL); return STATIC_VARIABLE_NAME;
            }
          case 255: break;
          case 80: 
            { return EXP_ASSIGN;
            }
          case 256: break;
          case 81: 
            { return BIN_LITERAL;
            }
          case 257: break;
          case 82: 
            { return HEX_LITERAL;
            }
          case 258: break;
          case 83: 
            { return ELLIPSIS;
            }
          case 259: break;
          case 84: 
            { return INF;
            }
          case 260: break;
          case 85: 
            { return NAN;
            }
          case 261: break;
          case 86: 
            { return SET;
            }
          case 262: break;
          case 87: 
            { return MAP;
            }
          case 263: break;
          case 88: 
            { return NEW;
            }
          case 264: break;
          case 89: 
            { return T_NUM;
            }
          case 265: break;
          case 90: 
            { return TRY;
            }
          case 266: break;
          case 91: 
            { return USE;
            }
          case 267: break;
          case 92: 
            { yybegin(HDND_START); return HDND_OPEN;
            }
          case 268: break;
          case 93: 
            { return BIT_SL_ASSIGN;
            }
          case 269: break;
          case 94: 
            { yybegin(MEMB_NAME); return NULLSAFE_ARROW;
            }
          case 270: break;
          case 95: 
            { return T_INT;
            }
          case 271: break;
          case 96: 
            { return TEQ;
            }
          case 272: break;
          case 97: 
            { return LAMBDA_ARROW;
            }
          case 273: break;
          case 98: 
            { return NTEQ;
            }
          case 274: break;
          case 99: 
            { return FOR;
            }
          case 275: break;
          case 100: 
            { return BIT_SR_ASSIGN;
            }
          case 276: break;
          case 101: 
            { hdnd_identifier = yytext().toString().replace("\'",""); yybegin(ND); return ND_ID;
            }
          case 277: break;
          case 102: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { if (yytext().toString().equals(hdnd_identifier)) { yybegin(YYINITIAL); return HD_ID; } else { yybegin(HD); return DQ_STRING; }
            }
          case 278: break;
          case 103: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { yypushback(1); if (yytext().toString().equals(hdnd_identifier)) { yybegin(YYINITIAL); return HD_ID; } else { yybegin(HD); return DQ_STRING; }
            }
          case 279: break;
          case 104: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { if (yytext().toString().equals(hdnd_identifier)) { yybegin(YYINITIAL); return ND_ID; } else { yybegin(ND); return ND_CONTENTS; }
            }
          case 280: break;
          case 105: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { yypushback(1); if (yytext().toString().equals(hdnd_identifier)) { yybegin(YYINITIAL); return ND_ID; } else { yybegin(ND); return ND_CONTENTS; }
            }
          case 281: break;
          case 106: 
            { yybegin(YYINITIAL); return SET;
            }
          case 282: break;
          case 107: 
            { yybegin(YYINITIAL); return MAP;
            }
          case 283: break;
          case 108: 
            { return ECHO;
            }
          case 284: break;
          case 109: 
            { return ENUM;
            }
          case 285: break;
          case 110: 
            { return ELSE;
            }
          case 286: break;
          case 111: 
            { return EXIT;
            }
          case 287: break;
          case 112: 
            { return NULL;
            }
          case 288: break;
          case 113: 
            { return TRUE;
            }
          case 289: break;
          case 114: 
            { return PAIR;
            }
          case 290: break;
          case 115: 
            { return CASE;
            }
          case 291: break;
          case 116: 
            { return SELF;
            }
          case 292: break;
          case 117: 
            { return TYPE;
            }
          case 293: break;
          case 118: 
            { return HH_OPENING_TAG;
            }
          case 294: break;
          case 119: 
            { return SPACESHIP;
            }
          case 295: break;
          case 120: 
            { return T_BOOL;
            }
          case 296: break;
          case 121: 
            { return T_VOID;
            }
          case 297: break;
          case 122: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { yypushback(1); if (yytext().toString().equals(hdnd_identifier)) { yybegin(YYINITIAL); return HD_ID; } else { yybegin(HD); return DQ_STRING; }
            }
          case 298: break;
          case 123: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { yypushback(1); if (yytext().toString().equals(hdnd_identifier)) { yybegin(YYINITIAL); return ND_ID; } else { yybegin(ND); return ND_CONTENTS; }
            }
          case 299: break;
          case 124: 
            { return FALSE;
            }
          case 300: break;
          case 125: 
            { return CONST;
            }
          case 301: break;
          case 126: 
            { return CLONE;
            }
          case 302: break;
          case 127: 
            { return CLASS;
            }
          case 303: break;
          case 128: 
            { return CATCH;
            }
          case 304: break;
          case 129: 
            { return SHAPE;
            }
          case 305: break;
          case 130: 
            { return TRAIT;
            }
          case 306: break;
          case 131: 
            { return TUPLE;
            }
          case 307: break;
          case 132: 
            { return THROW;
            }
          case 308: break;
          case 133: 
            { return THIS;
            }
          case 309: break;
          case 134: 
            { return FINAL;
            }
          case 310: break;
          case 135: 
            { return T_FLOAT;
            }
          case 311: break;
          case 136: 
            { return ASYNC;
            }
          case 312: break;
          case 137: 
            { return ARRAY;
            }
          case 313: break;
          case 138: 
            { return AWAIT;
            }
          case 314: break;
          case 139: 
            { return MIXED;
            }
          case 315: break;
          case 140: 
            { return YIELD;
            }
          case 316: break;
          case 141: 
            { return BREAK;
            }
          case 317: break;
          case 142: 
            { return WHILE;
            }
          case 318: break;
          case 143: 
            { return LIST;
            }
          case 319: break;
          case 144: 
            { yybegin(YYINITIAL); return CLASS;
            }
          case 320: break;
          case 145: 
            { return ELSEIF;
            }
          case 321: break;
          case 146: 
            { return T_STRING;
            }
          case 322: break;
          case 147: 
            { return STATIC;
            }
          case 323: break;
          case 148: 
            { return SWITCH;
            }
          case 324: break;
          case 149: 
            { return RETURN;
            }
          case 325: break;
          case 150: 
            { return VPUBLIC;
            }
          case 326: break;
          case 151: 
            { return PARENT;
            }
          case 327: break;
          case 152: 
            { yybegin(YYINITIAL); return ARRAY;
            }
          case 328: break;
          case 153: 
            { return EXTENDS;
            }
          case 329: break;
          case 154: 
            { return MAGIC_CONST;
            }
          case 330: break;
          case 155: 
            { return NEWTYPE;
            }
          case 331: break;
          case 156: 
            { return REQUIRE;
            }
          case 332: break;
          case 157: 
            { return DEFAULT;
            }
          case 333: break;
          case 158: 
            { return FOREACH;
            }
          case 334: break;
          case 159: 
            { return FINALLY;
            }
          case 335: break;
          case 160: 
            { return VPRIVATE;
            }
          case 336: break;
          case 161: 
            { return CONTINUE;
            }
          case 337: break;
          case 162: 
            { return T_RESOURCE;
            }
          case 338: break;
          case 163: 
            { yybegin(FUNC_NAME); return FUNCTION;
            }
          case 339: break;
          case 164: 
            { return T_ARRAYKEY;
            }
          case 340: break;
          case 165: 
            { return ABSTRACT;
            }
          case 341: break;
          case 166: 
            { return NAMESPACE;
            }
          case 342: break;
          case 167: 
            { return INTERFACE;
            }
          case 343: break;
          case 168: 
            { return INVARIANT;
            }
          case 344: break;
          case 169: 
            { return VPROTECTED;
            }
          case 345: break;
          case 170: 
            { return INSTANCEOF;
            }
          case 346: break;
          case 171: 
            { return IMPLEMENTS;
            }
          case 347: break;
          case 172: 
            { yybegin(YYINITIAL); return DESTRUCT;
            }
          case 348: break;
          case 173: 
            { return DESTRUCT;
            }
          case 349: break;
          case 174: 
            { yybegin(YYINITIAL); return CONSTRUCT;
            }
          case 350: break;
          case 175: 
            { return CONSTRUCT;
            }
          case 351: break;
          case 176: 
            { return REQUIRE_ONCE;
            }
          case 352: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
